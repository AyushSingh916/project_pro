generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  username              String         @unique
  email                 String         @unique
  password              String
  imageUrl              String?        @unique
  organizations         Organization[] @relation("UserOrganizations")
  projects              Project[]      @relation("ProjectCollaborators")
  issues                Issue[]
  notificationsSent     Notification[] @relation("NotificationSender")
  notificationsReceived Notification[] @relation("NotificationReceiver")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  Organization          Organization[]
}

model Organization {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  slug          String         @unique
  adminUsername String         @default("")
  admin         User           @relation(fields: [adminUsername], references: [username])
  description   String?
  users         User[]         @relation("UserOrganizations")
  projects      Project[] // Relation to Project model
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Notification  Notification[]
}

model Project {
  id               Int           @id @default(autoincrement())
  name             String
  description      String?
  organization     Organization  @relation(fields: [organizationSlug], references: [slug])
  organizationSlug String
  status           ProjectStatus @default(PENDING)
  sprints          Sprint[] // Relation to Sprints
  collaborators    User[]        @relation("ProjectCollaborators") // Relation to Users as collaborators
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Sprint {
  id        Int      @id @default(autoincrement())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  startDate DateTime
  endDate   DateTime
  issues    Issue[] // Relation to Issues
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id               String   @id @default(cuid())
  title            String
  description      String?
  sprint           Sprint   @relation(fields: [sprintId], references: [id])
  sprintId         Int
  assignee         User     @relation(fields: [assigneeUsername], references: [username])
  assigneeUsername String
  priority         Priority @default(MEDIUM)
  status           Status   @default(TODO)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Notification {
  id               String       @id @default(cuid())
  sender           User         @relation("NotificationSender", fields: [senderUsername], references: [username])
  senderUsername   String
  receiver         User         @relation("NotificationReceiver", fields: [receiverUsername], references: [username])
  receiverUsername String
  organization     Organization @relation(fields: [organizationSlug], references: [slug])
  organizationSlug String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}
